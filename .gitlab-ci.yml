variables:
  IMAGE: artifactorycn.netcracker.com:17048/utils/terraform-openstack:1.4.6
  SECRET_TFVARS_FILE: "$SECRET_TFVARS_FILE"
  SECRET_KEY: "$SECRET_KEY"
  OS_PASSWORD: "$OS_PASS"
  ANSIBLE_HOST_KEY_CHECKING: 'false'
  PRIVATE_KEY: $PRIVATE_KEY
  
stages:
  - lint
  - deploy
  - configure
  - test
  - destroy

#lint_terraform:
#  stage: lint
#  tags:
#    - NETCRACKER
#  image: $IMAGE
#  script:
#    - tflint <path_to_demo_3_terraform_code>

#lint_ansible:
#  stage: lint
#  tags:
#    - NETCRACKER
#  image: $IMAGE
#  script:
#    - ansible-lint <path_to_demo_4_ansible_code>

deploy:
  stage: deploy
  tags:
    - NETCRACKER
  image: $IMAGE
  script:
    - echo "$OPENRC_FILE" > openrc.sh
    - chmod +x openrc.sh
    - echo "export OS_PASSWORD=$OS_PASS" >> openrc.sh
    - echo "export OS_CACERT=$(pwd)/zephyr02.crt" >> openrc.sh
    - source openrc.sh
#    - echo "$SECRET_TFVARS_FILE" | base64 -d > .secret.tfvars.enc
#    - openssl enc -aes-256-cbc -d -in .secret.tfvars.enc -out .secret.tfvars -k "$SECRET_KEY" -pbkdf2
    - cd terraform
    - echo "$SECRET_TFVARS_FILE" > .secret.tfvars
    - terraform init
    - terraform apply -var-file=".secret.tfvars" -auto-approve
    - terraform state pull > tfstate.json
    - |
      FIP=($(awk -F'[:,]' '/openstack_networking_floatingip_v2/ {getline; while(getline && !/}/) {if (/address/) {gsub(/[[:space:]]+/, "", $2); gsub(/"/, "", $2); print $2}}}' tfstate.json))
      echo "FLOATING_IP=$FIP" >> ../terraform.env
  artifacts:
    paths:
      - terraform/tfstate.json
      - terraform.env

configure:
  stage: configure
  tags:
    - NETCRACKER
  image: $IMAGE
  script:
    - cd ansible
    - source ../terraform.env
    - echo "my_host ansible_host=$FLOATING_IP" > inventory/hosts
    - mkdir -p $HOME/.ssh
    - echo "$PRIVATE_KEY" > $HOME/.ssh/id_rsa
    - chmod 600 $HOME/.ssh/id_rsa
    - sleep 60
    - ansible-playbook -i inventory/hosts site.yml

test:
  stage: test
  tags:
    - NETCRACKER
  image: artifactorycn.netcracker.com:17048/utils/terraform-openstack:1.4.6
  script:
    - source terraform.env
    - |
      response_code=$(curl -s -o /dev/null -w "%{http_code}" http://$FLOATING_IP:8080)
      if [ "$response_code" -eq 200 ]; then
        echo "HTTP/200 response received"
      else
        echo "Error: Unexpected HTTP response $response_code"
        exit 1
      fi

destroy:
  stage: destroy
  tags:
    - NETCRACKER
  image: $IMAGE
  script:
    - cd ../terraform
    - terraform init
    - terraform state push tfstate.json
    - terraform destroy -auto-approve <path_to_demo_3_terraform_code>
