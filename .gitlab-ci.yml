variables:
  IMAGE: artifactorycn.netcracker.com:17048/tfansible:1.0
  SECRET_TFVARS_FILE: "$SECRET_TFVARS_FILE"
  SECRET_KEY: "$SECRET_KEY"
  OS_PASSWORD: "$OS_PASS"
  
stages:
  - lint
  - deploy
  - configure
  - test
  - destroy

#lint_terraform:
#  stage: lint
#  tags:
#    - NETCRACKER
#  image: $IMAGE
#  script:
#    - tflint <path_to_demo_3_terraform_code>

#lint_ansible:
#  stage: lint
#  tags:
#    - NETCRACKER
#  image: $IMAGE
#  script:
#    - ansible-lint <path_to_demo_4_ansible_code>

deploy:
  stage: deploy
  tags:
    - NETCRACKER
  image: $IMAGE
  script:
    - echo "$OPENRC_FILE" > openrc.sh
    - chmod +x openrc.sh
    - echo "export OS_PASSWORD=$OS_PASS" >> openrc.sh
    - echo "export OS_CACERT=$(pwd)/zephyr02.crt" >> openrc.sh
    - cat openrc.sh
    - source openrc.sh && echo "openrc sourced"
    - echo "$SECRET_TFVARS_FILE" | base64 -d > .secret.tfvars.enc
    - openssl enc -aes-256-cbc -d -in .secret.tfvars.enc -out .secret.tfvars -k "$SECRET_KEY" -pbkdf2
    - cd terraform
    - terraform init --plugin-dir /opt/.terraform/providers
    - terraform apply -var-file="../.secret.tfvars" -auto-approve
    - terraform state pull > tfstate.json
    - |
      FIP=$(cat terraform/tfstate.json | jq -r '.floating_ip.value')
      echo "FLOATING_IP=$FIP" >> $CI_ENVIRONMENT_URL/terraform.env
  artifacts:
    paths:
      - terraform/tfstate.json

configure:
  stage: configure
  tags:
    - NETCRACKER
  image: $IMAGE
  script:
    - cd ansible
    - source $CI_ENVIRONMENT_URL/terraform.env
    - echo "my_host ansible_host=$FLOATING_IP" > inventory.ini
    - ansible-playbook -i inventory.ini playbook.yml

test:
  stage: test
  tags:
    - NETCRACKER
  image: $IMAGE
  script:
    - curl -I http://0.0.0.0:8080
    # Add additional tests if needed

destroy:
  stage: destroy
  tags:
    - NETCRACKER
  image: $IMAGE
  script:
    - cd ../terraform
    - terraform init
    - terraform state push tfstate.json
    - terraform destroy -auto-approve <path_to_demo_3_terraform_code>
