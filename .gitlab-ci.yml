variables:
  IMAGE: artifactorycn.netcracker.com:17048/tfansible:1.0
  OPENRC_PATH: ./terraform/openrc.sh

before_script:
  - echo "$OPENRC_FILE" > openrc.sh
  - source openrc.sh
  - echo "Checking if openrc.sh is sourced correctly"
  - echo "Environment variables:"
  - apt-get install curl -y
#  - apt-get install fastjar -y
  - apt-get install unzip -y
  - mkdir test
  - cd test
  - curl -O https://git.netcracker.com/rude0423/demo_lab/-/tree/master/terraform_1.4.6_linux_amd64.zip
  - ls -al
  - pwd
  - mv terraform_1.4.6_linux_amd64.zip terraform_1.4.6_linux_amd64.gz
  - gunzip terraform_1.4.6_linux_amd64.gz
  - pwd
  - ls -al
  - mv terraform /usr/local/bin/
  - terraform -version
  - pwd
#  - env | grep OS_
#  - apt-get update
#  - apt-get install -y wget unzip  # Install required dependencies (if needed)
#  - wget https://releases.hashicorp.com/terraform/1.4.6/terraform_1.4.6_linux_amd64.zip
#  - unzip terraform_1.4.6_linux_amd64.zip
#  - chmod +x terraform
#  - mv terraform /usr/local/bin/
#  - terraform -version
#  - terraform -install-version 1.4.6
#  - terraform --version
#before_script:
#  - source $OPENRC_PATH
#  - echo "Checking if openrc.sh is sourced correctly"
#  - echo "Environment variables:"
#  - env | grep OS_

stages:
#  - lint
  - deploy
  - configure
  - test
  - destroy

#lint_ansible:
#  stage: lint
#  tags:
#    - NETCRACKER
#  image: $IMAGE
#  script:
#    - ansible-lint ./ansile/site.yml # Linting command for Demo 4 - ansible code

#lint_terraform:
#  stage: lint
#  tags:
#    - NETCRACKER
#  image: $IMAGE
#  script:
#    - tflint # Linting command using tflint for Demo 3 - terraform code

deploy:
  stage: deploy
  tags:
    - NETCRACKER
  image: $IMAGE
  script:
#    - source $OPENRC_PATH
#    - echo "Checking if openrc.sh is sourced correctly"
#   - echo "Environment variables:"
#   - env | grep OS_
    - ls -al
    - cd terraform
    - ls -al
    - terraform init -upgrade # Initialize Terraform
    - terraform --version # Print Terraform version for debugging purposes
#    - terraform workspace new myworkspace || terraform workspace select myworkspace # Create or select a workspace (optional)
#    - terraform init # Re-initialize Terraform after workspace selection (if applicable)
    - terraform apply -var-file="../.secret.tfvars" -auto-approve # Apply Demo 3 - terraform code to create VM
  artifacts:
    paths:
      - ./terraform/terraform.tfstate # Save tfstate as artifact

configure:
  stage: configure
  tags:
    - NETCRACKER
  image: $IMAGE
  script:
    - ansible-playbook ./ansible/site.yml # Configure VM using Demo 4 - ansible code

test:
  stage: test
  tags:
    - NETCRACKER
  image: $IMAGE
  script:
    - 'curl -I http://0.0.0.0:8080'

destroy:
  stage: destroy
  tags:
    - NETCRACKER
  image: $IMAGE
  script:
#    - terraform init # Initialize Terraform
#    - terraform destroy -auto-approve # Load tfstate from artifacts and destroy VM
    - terraform init # Initialize Terraform
    - terraform state pull -from=./terraform/terraform.tftate > terraform.tfstate # Load tfstate from an alternative location
    - terraform destroy -var-file=".secret.tfvars" -auto-approve # Destroy VM based on loaded tfstate

#dependencies:
#  stage: destroy
#  tags:
#    - NETCRACKER
#  script:
#    - terraform init # Initialize Terraform
#    - terraform workspace select default # Select the default workspace for tfstate loading
#    - terraform state pull > ./terraform/terraform.tfstate # Load tfstate from artifacts for destruction
