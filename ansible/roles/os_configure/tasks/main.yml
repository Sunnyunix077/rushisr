---
- name: Print Ubuntu Release
  ansible.builtin.debug:
    var: ansible_distribution_release
- name: Create resolv.conf file
  ansible.builtin.template:
    src: resolv.conf.j2
    dest: /etc/resolv.conf
    mode: '0644' # noqa
  notify:
    - Restart Network Service

- name : Download Docker CE repository PGP key.
  ansible.builtin.get_url :
    url : "{{docker_pgp_key_url}}"
    dest : "{{gpg_raw_file_location}}"
    
- name : Import downloaded PGP key.
  ansible.builtin.command :
    cmd : gpg --dearmor -o {{docker_archive_keyring_path}} {{gpg_raw_file_location}}

- name: Download repository file
  ansible.builtin.get_url:
    url: "{{ item }}"
    dest: /tmp/{{ item | basename }}
  with_items: "{{ repo.ubuntu }}"
  delegate_to: localhost

- name: Copy repository file to the correct location
  ansible.builtin.copy:
    src: "/tmp/{{ item | basename }}"
    dest: /etc/apt/sources.list
  with_items:
    - nc_focal.list

- name: Update apt cache
  ansible.builtin.apt:
    update_cache: true
    force_apt_get: true

- name: Install packages from packages.deb list
  ansible.builtin.apt:
    name: "{{ packages.deb  }}"
    state: present
    force_apt_get: true
  ignore_errors: yes

- name : Check if docker-ce package is available.
  ansible.builtin.command :
    cmd : apt-cache policy docker-ce
    register : apt_cache_policy_result

- name : Show apt-cache policy result.
  ansible.builtin.debug :
    var : apt_cache_policy_result.stdout_lines

- name: Copy pip configuration to /etc/pip.conf on target hosts
  ansible.builtin.copy:
    src: pip.conf
    dest: /etc/pip.conf

#- name: Create directory
#  ansible.builtin.file:
#    path: "{{ dir_path }}"
#    state: directory

#- name: Create volume group
#  community.general.system.lvg:
#    vg: "{{ my_vg }}"
#    pvs: /dev/vdb

#- name: Create logical volume
#  community.general.system.lvol:
#    vg: "{{ my_vg }}"
#    lv: "{{ my_lv }}"
#    size: 4G

#- name: Format logical volume to xfs
#  community.general.system.filesystem:
#    fstype: xfs
#    dev: "/dev/{{ my_vg }}/{{ my_lv }}"

#- name: Mount logical volume
#  ansible.posix.mount:
#    path: "{{ dir_path }}"
#    src: "/dev/{{ my_vg }}/{{ my_lv }}"
#    fstype: xfs
#    state: mounted
